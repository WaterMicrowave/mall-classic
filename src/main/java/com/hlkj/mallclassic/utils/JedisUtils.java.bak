package com.hlkj.mallclassic.utils;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;


/**
 * @ProjectName: hxfy
 * @Package: com.hlkj.classics.util
 * @ClassName: JedisUtils
 * @Author: Administrator
 * @Description: 每次操作都会连接关闭池，后期可优化。
 * @Date: 2020/12/11 14:55
 * @Version: 1.0
 */
@Component
public class JedisUtils {

    private static String host;
    private static Integer maxIdle;
    private static Integer maxTotal;
    private static String pwd;
    private static Integer port;
    private static Integer timeOut;

    @Value("${redis.host}")
    public void setHost(String host) {
        JedisUtils.host = host;
    }
    @Value("${redis.maxIdle}")
    public void setMaxIdle(Integer maxIdle) {
        JedisUtils.maxIdle = maxIdle;
    }
    @Value("${redis.maxTotal}")
    public void setMaxTotal(Integer maxTotal) {
        JedisUtils.maxTotal = maxTotal;
    }
    @Value("${redis.pwd}")
    public void setPwd(String pwd) {
        JedisUtils.pwd = pwd;
    }
    @Value("${redis.port}")
    public void setPort(Integer port) {
        JedisUtils.port = port;
    }
    @Value("${redis.timeOut}")
    public void setTimeOut(Integer timeOut) {
        JedisUtils.timeOut = timeOut;
    }

    private static JedisPool getJedisPool() {
        JedisPoolConfig config = new JedisPoolConfig();
        //最大空闲连接数, 应用自己评估，不要超过ApsaraDB for Redis每个实例最大的连接数
        config.setMaxIdle(JedisUtils.maxIdle);
        //最大连接数, 应用自己评估，不要超过ApsaraDB for Redis每个实例最大的连接数
        config.setMaxTotal(JedisUtils.maxTotal);
        config.setTestOnBorrow(false);
        config.setTestOnReturn(false);
        String host = JedisUtils.host;
        String password = JedisUtils.pwd;
        JedisPool pool = new JedisPool(config, host, JedisUtils.port, JedisUtils.timeOut, password);
        return pool;
    }

    //保存不设置过期时间
    public static boolean jedisPush(String key, String value) {
        try {
            JedisPool jedisPool = JedisUtils.getJedisPool();
            Jedis jedis = jedisPool.getResource();
            jedis.set(key,value);
            JedisUtils.closeJedisAndPool(jedisPool,jedis);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * redis保存
     * @param key
     * @param value
     * @param expire 过期时间：秒
     * @return
     */
    public static boolean jedisPush(String key, String value, int expire) {
        try {
            JedisPool jedisPool = JedisUtils.getJedisPool();
            Jedis jedis = jedisPool.getResource();
            jedis.set(key,value);
            //设置过期时间
            jedis.expire(key,expire);
            JedisUtils.closeJedisAndPool(jedisPool,jedis);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    //获取指定键的值
    public static String jedisGet(String key) {
        try {
            JedisPool jedisPool = JedisUtils.getJedisPool();
            Jedis jedis = jedisPool.getResource();
            String value = jedis.get(key);
            JedisUtils.closeJedisAndPool(jedisPool,jedis);
            return value;
        } catch (Exception e) {
            return "err";
        }
    }
    //单个删除
    public static boolean jedisDelete(String key) {
        try {
            JedisPool jedisPool = JedisUtils.getJedisPool();
            Jedis jedis = jedisPool.getResource();
            jedis.del(key);
            JedisUtils.closeJedisAndPool(jedisPool,jedis);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    //批量删除
    public static boolean jedisDeleteBatch(String ... keys) {
        try {
            JedisPool jedisPool = JedisUtils.getJedisPool();
            Jedis jedis = jedisPool.getResource();
            jedis.del(keys);
            JedisUtils.closeJedisAndPool(jedisPool,jedis);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    //关闭连接
    public static void closeJedisAndPool(JedisPool jedisPool, Jedis jedis){
        jedis.close();
        jedisPool.destroy();
    }

}